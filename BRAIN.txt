Context Snapshot (updated 2025-10-13 04:39Z)
-----------------------------------
- Backend focus: openguild-server crate (Rust, Axum).
- Config hierarchy: config files -> env (OPENGUILD_SERVER__) -> CLI flags.
- Key recent features:
  * Structured ServerConfig loader with metrics + log format options.
  * Prometheus-powered `/metrics` exporter under `--features metrics`, toggled via `OPENGUILD_SERVER__METRICS__ENABLED` (exports `openguild_http_requests_total` + `openguild_db_ready`).
  * Graceful shutdown helper with test-only Notify hook; `run()` now attempts DB connectivity (if DATABASE_URL set) and readiness reports database status (pending/configured/error).
  * CLI overrides via Clap (`--bind-addr`, `--host`, `--port`, `--log-format`, metrics flags, `--database-url`, `--session-signing-key`, `--server-name`).
  * ServerConfig now tracks a canonical `server_name` surfaced in event metadata; env/CLI wiring and docs were updated.
  * Storage crate now exposes a clonable `StoragePool` wrapper (`connect` returns it) plus a SQLx migration smoke test (skips if `OPENGUILD_TEST_DATABASE_URL`/`DATABASE_URL` unset).
  * Session module in `server` adds `/sessions/login` (JSON) with validation + signed responses using ed25519; backing store now persists to Postgres when a pool is available (falls back to in-memory for credentials-only mode).
  * Messaging core (Week 4): REST CRUD for guilds/channels, optimistic message persistence, and WebSocket fan-out with bounded broadcast/backpressure and replay window. In-memory fallback mirrors semantics when DATABASE_URL is absent.
  * `openguild-core::messaging` introduces message payload builders + proptests to ensure canonical event IDs remain unique; `openguild-storage::messaging` wires SQLx repositories for guilds/channels/events.
  * Event IDs now derive from the BLAKE3 hash of the canonical payload (base58 `$â€¦`); docs/API + PROTOCOL align with the implementation.
  * Metrics exporter honours `metrics.bind_addr` by spawning a dedicated Axum listener when configured; `/metrics` remains on the main router otherwise.
  * tower-http request ID middleware now runs globally: inbound `X-Request-Id` values are propagated, UUIDs are minted when absent, responses echo the header, and tracing spans/log output automatically include the `request_id` field.
  * Metrics recording now keys on `MatchedPath` instead of hard-coded strings, keeping Prometheus labels aligned with router definitions.
  * Messaging HTTP routes map missing resources to HTTP 404, preserve validation 400s, and record request metrics; docs/API updated to reflect new statuses.
  * Integration test (`websocket_broadcasts_events`) exercises fan-out via `tokio_tungstenite` to guard regressions.
  * Persistent credential storage: added `0004_create_users.sql` with Argon2 hashed passwords and a SQLx-backed `UserRepository`; login now verifies against Postgres when available.
  * Developer tooling now ships a dedicated `xtask` binary (`fmt`, `lint`, `test`, `ci`, `ci-metrics-smoke`) for cross-platform workflows.
  * Week 6 kickoff: implemented refresh-token lifecycle (SigningKeyRing + CLI/env fallbacks), new `refresh_sessions` table with device metadata, and login responses now emit paired access/refresh tokens (unit tests cover issuance).
- Week 5 observability prep:
  * Request IDs now flow through tracing/log spans for both HTTP requests and WebSocket upgrades (capture tests verify span enrichment + header propagation); next step is documenting downstream usage and validating log-sink adoption.
  * Added a tower-based latency recorder so `MetricsContext` captures duration histograms alongside counters; new messaging counters (delivered/no_subscribers/dropped) and WebSocket queue depth gauges surface via `/metrics`.
  * `MetricsContext` scaffolding is in place; remaining work is alert tuning/dashboards and deciding on span sampling/retention strategy once observability tooling lands.
  * WebSocket fan-out still needs emitted event metadata and dashboards that expose queue depth/backpressure for operators.
- Tests: `cargo test -p openguild-core`, `cargo test -p openguild-storage`, `cargo test -p openguild-server` (metrics gating optional). WebSocket integration test requires Tokio runtime (runs by default).
- Migrations: `backend/migrations/0001_initial.sql`, `0002_create_sessions.sql`, `0003_messaging.sql`, `0004_create_users.sql`.
- Docs touched: docs/SETUP.md (session key + DB persistence notes), docs/TIMELINE.md (Weeks 1-5 updates + credential storage notes), docs/OBSERVABILITY.md (local Prometheus/Grafana stack), docs/OPERATIONS.md (deploy/rollback playbook), docs/API.md (sessions + guild/channel/message routes + WebSocket), docs/PROTOCOL.md (event envelope + guardrails), docs/CI_PLAN.md (matrix outline).
- Tooling: `backend/xtask` crate provides `fmt`, `lint`, `test`, `ci`, and `ci-metrics-smoke`; legacy Makefile targets now shell out to xtask.
- Outstanding follow-ups (pre-Week 5 checkpoints):
  * Publish request ID usage guidance for frontend/ops teams and confirm log aggregation retains the `request_id` field.
  * Promote Prometheus/Grafana beyond local dev (CI + staging), add alertmanager + finalized thresholds for latency, messaging counters, and queue depth gauges.
  * SQLx-backed credential storage now powers login when a database is configured; next up is wiring user registration flows (API + CLI seeding) and revisiting refresh token design.
  * Finalise payload validation/size limits + authz on messaging endpoints (currently trust arbitrary sender), coordinating with upcoming auth/session work.
- CI: see docs/CI_PLAN.md for matrix + scheduled jobs.

Notes for next agent (2025-10-13 04:39Z):
- Messaging CRUD/WebSocket stack is live; sync with frontend on any schema tweaks (sender identity, pagination cursors) as they build against docs/API.md.
- Prioritise observability sprint continuation: document request ID adoption, confirm log sinks preserve `request_id`, and plan Grafana/alert rollout once Prometheus stack lands (see docs/OBSERVABILITY.md for local stack).
- Confirm downstream consumers handle the new BLAKE3/base58 event IDs and the 404 semantics introduced on messaging routes.
- Share docs/OBSERVABILITY.md + docs/OPERATIONS.md with frontend/ops so `X-Request-Id` adoption and runbooks are baked into their workflows.
- Surface the new `server_name` configuration in deployment manifests so `origin_server` is stable across environments.
- Plan user registration & credential provisioning flows (API and CLI) leveraging the new `UserRepository`; refresh token work still pending.
- Readiness path keeps a pooled DB handle (StoragePool clone) while logging eager connect errors - preserve this behaviour when refactoring.
- CI plan lives in docs/CI_PLAN.md; workflows still missing.
- Prefer `cargo xtask fmt|lint|test|ci` for routine Rust workflows; legacy Makefile targets now wrap xtask.
- Keep BRAIN.txt current; still our ad-hoc handoff channel.

Week 6 current gaps / TODOs:
- [ ] Document the refreshed login contract (device metadata requirement + refresh token response) in docs/API.md and docs/PROTOCOL.md; coordinate with frontend for `device_id` enforcement.
- [ ] Plan revoke/rotate flows (API surface + CLI tooling) building on refresh session store scaffolding.








