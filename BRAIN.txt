Context Snapshot (updated 2025-10-25 20:56Z)
-----------------------------------
- Backend focus: openguild-server crate (Rust, Axum).
- Config hierarchy: config files -> env (OPENGUILD_SERVER__) -> CLI flags.
- Key recent features:
  * Structured ServerConfig loader with metrics + log format options.
  * Prometheus-powered `/metrics` exporter under `--features metrics`, toggled via `OPENGUILD_SERVER__METRICS__ENABLED` (exports `openguild_http_requests_total` + `openguild_db_ready`).
  * Graceful shutdown helper with test-only Notify hook; `run()` now attempts DB connectivity (if DATABASE_URL set) and readiness reports database status (pending/configured/error).
  * CLI overrides via Clap (`--bind-addr`, `--host`, `--port`, `--log-format`, metrics flags, `--database-url`, `--session-signing-key`, `--server-name`).
  * ServerConfig tracks canonical `server_name` surfaced in event metadata; env/CLI wiring and docs updated.
  * Storage crate exposes clonable `StoragePool`; SQLx migration smoke test (skips unless `OPENGUILD_TEST_DATABASE_URL`/`DATABASE_URL` set).
  * Session module provides `/sessions/login` with validation + ed25519-signed tokens; persists to Postgres when available.
  * Messaging core (Week 4): REST CRUD for guilds/channels, optimistic persistence, WebSocket fan-out with backpressure + replay window; in-memory fallback mirrors semantics when DB absent.
  * `openguild-core::messaging` adds payload builders + proptests; storage crate wires SQLx repositories.
  * Event IDs derived from BLAKE3 hash of canonical payload (base58 `$...`); docs/API + PROTOCOL aligned.
  * Metrics exporter honours `metrics.bind_addr`; `/metrics` stays on main router otherwise.
  * tower-http request ID middleware runs globally (propagation + logging); metrics use `MatchedPath`.
  * Week 6/7 security: messaging REST/WS routes require bearer tokens; `sender` must match authenticated user. Integration tests cover missing auth and sender mismatches.
  * Messaging validation + enforcement: guild/channel names trimmed + capped at 64 chars; message bodies capped at 4,000 chars. Violations log warnings and increment `openguild_messaging_rejections_total` with reason labels (`unauthorized`, `guild_name_empty`, `guild_name_length`, `channel_name_empty`, `channel_name_length`, `message_empty`, `message_length`, `sender_mismatch`, `message_rate_limit`, `ip_rate_limit`, `websocket_limit`).
  * CLI overrides now expose `--messaging-max-messages-per-user-per-window`, `--messaging-max-messages-per-ip-per-window`, and `--messaging-rate-limit-window-secs`, keeping server binaries in sync with ServerConfig messaging knobs.
  * Observability guide now outlines request ID usage, staging/stable promotion steps, and rejection metric alert thresholds (docs/OBSERVABILITY.md refresh).
  * Docker Compose sets `OPENGUILD_SERVER__SERVER_NAME=dev.openguild.local`; operations playbook highlights per-environment overrides and log sink requirements.
  * Testing matrix captured in `docs/TESTING.md` (commands mapped to Week 1-7 features; use `cargo xtask test` + `cargo xtask ci-metrics-smoke`).
  * WebSocket concurrency enforced via global semaphore; new integration test asserts HTTP 429 when capacity reached.
  * Global security headers applied via tower-http set-header layer (CSP `default-src 'none'`, `X-Frame-Options: DENY`, `X-Content-Type-Options: nosniff`, `Referrer-Policy: no-referrer`); health test validates defaults.
  * Threat model expanded with messaging auth, validation, and metrics exposure; operations playbook documents header defaults.
  * Persistent credential storage includes Argon2-backed `UserRepository`; `/users/register` and `seed-user` shipped.
  * Storage crate now ships SQLx-backed tests for `MessagingRepository` and `UserRepository` (plus helper cleanup); they skip unless `OPENGUILD_TEST_DATABASE_URL`/`DATABASE_URL` is exported so CI/devs can opt in.
  * Lightweight crates (`openguild-media`, `openguild-sfu-client`) have direct unit tests to keep coverage complete after the latest pushes.
  * Developer tooling: `backend/xtask` crate for fmt/lint/test/ci workflows; legacy Makefile wraps xtask.
  * Refresh-token lifecycle implemented (SigningKeyRing + refresh session store); login responses emit access+refresh tokens.
  * Federation groundwork (Week 8): new `FederationConfig` trusted server list, `FederationService` signature verification with telemetry, and `POST /federation/transactions` route + tests for enabled/disabled and success/failure flows.
- Week 5 observability prep:
  * Request IDs flow through HTTP + WS traces (tests capture propagation).
  * Added latency histograms, messaging counters, WebSocket queue depth gauges.
  * MetricsContext scaffolding ready; need alert tuning + dashboards post-Prometheus rollout.
  * WebSocket fan-out still needs richer event metadata dashboards.
- Tests: `cargo test -p openguild-core`, `cargo test -p openguild-storage`, `cargo test -p openguild-server` (WS integration requires Tokio).
- Migrations: `backend/migrations/0001_initial.sql`, `0002_create_sessions.sql`, `0003_messaging.sql`, `0004_create_users.sql`.
- Docs touched: docs/SETUP.md (session key + DB persistence), docs/TIMELINE.md (Weeks 1-7 milestones), docs/OBSERVABILITY.md (request ID guidance, staging rollout, alert thresholds), docs/OPERATIONS.md (deploy playbook + server_name/log pipeline guidance), docs/API.md (auth requirements and limits), docs/PROTOCOL.md (sender identity now UUID), docs/THREATMODEL.md (messaging auth + observability), docs/CI_PLAN.md (matrix outline).
- Tooling: prefer `cargo xtask fmt|lint|test|ci`; legacy Makefile targets pass-through.

Outstanding follow-ups:
- Roll Alertmanager into staging/prod and hook rejection metric alerts once the observability stack is deployed beyond local.
- Share the refreshed request ID guidance with frontend/ops and confirm staging/prod log pipelines retain the field.
- Document bootstrap workflow in docs/SETUP.md now that `/users/register` and refresh tokens ship; revisit refresh revoke/rotate design once telemetry is in place.
- Extend RBAC/rate limiting with configurable per-IP quotas and abuse detection (per-user & per-IP limits now in server).
- Flesh out audit logging story (middleware placeholder still TODO).
- CI workflows still missing (see docs/CI_PLAN.md).
- Ensure DB-backed tests keep running in environments with `OPENGUILD_TEST_DATABASE_URL`; add guidance to docs/TESTING.md when documenting the opt-in flag set.
- Finish canonical event versioning story for federation (Timeline Week 8 first bullet) and document how trusted key IDs rotate; add docs/TESTING.md + docs/API.md guidance for `/federation/transactions`.

Notes for next agent (2025-10-25 20:56Z):
- Align frontend on sender UUID requirement and rejection reason handling.
- Ensure reverse proxies/CDNs preserve security headers; update deployment manifests as needed.
- Coordinate with infra on the documented Alertmanager rollout plan and confirm rejection metric alerts page correctly.
- Circulate the refreshed OBSERVABILITY/OPERATIONS docs to ops + frontend; capture feedback once staging log pipelines are verified.
- Preserve readiness behaviour (pooled DB handle retained) during refactors.
- Keep CI plan progress visible; aim to land workflows soon.
- Maintain this BRAIN file as the handoff channel.
 - New storage tests rely on live Postgres; before running `cargo test --workspace` in CI or shared dev environments, set `OPENGUILD_TEST_DATABASE_URL` (or fallback `DATABASE_URL`) or expect them to skip with a log message.
- Federated endpoints now depend on `ServerConfig.federation.trusted_servers` entries (server name + ed25519 key id); extend docs/SETUP.md/docs/API.md with sample config + signing guidance and consider CLI/env overrides when requirements settle.

Week 6 current gaps / TODOs:
- [x] Document refreshed login contract (device metadata + refresh tokens) and coordinate with frontend.
- [x] Plan refresh revoke/rotate flows (API + CLI stubs).
- [x] Enforce messaging authz and baseline rate limiting (validation caps, WS semaphore).
- [ ] Hook rejection metrics into Alertmanager once observability stack is promoted; evaluate configurable per-IP limits for operators (docs cover rollout; need staging execution).




