Context Snapshot (updated 2025-10-13 00:12Z)
-----------------------------------
- Backend focus: openguild-server crate (Rust, Axum).
- Config hierarchy: config files -> env (OPENGUILD_SERVER__) -> CLI flags.
- Key recent features:
  * Structured ServerConfig loader with metrics + log format options.
  * Prometheus-powered `/metrics` exporter under `--features metrics`, toggled via `OPENGUILD_SERVER__METRICS__ENABLED` (exports `openguild_http_requests_total` + `openguild_db_ready`).
  * Graceful shutdown helper with test-only Notify hook; `run()` now attempts DB connectivity (if DATABASE_URL set) and readiness reports database status (pending/configured/error).
  * CLI overrides via Clap (`--bind-addr`, `--host`, `--port`, `--log-format`, metrics flags, `--database-url`, `--session-signing-key`).
  * Storage crate now exposes a clonable `StoragePool` wrapper (`connect` returns it) plus a SQLx migration smoke test (skips if `OPENGUILD_TEST_DATABASE_URL`/`DATABASE_URL` unset).
  * Session module in `server` adds `/sessions/login` (JSON) with validation + signed responses using ed25519; backing store now persists to Postgres when a pool is available (falls back to in-memory for credentials-only mode).
  * Messaging core (Week 4): REST CRUD for guilds/channels, optimistic message persistence, and WebSocket fan-out with bounded broadcast/backpressure and replay window. In-memory fallback mirrors semantics when DATABASE_URL is absent.
  * `openguild-core::messaging` introduces message payload builders + proptests to ensure canonical event IDs remain unique; `openguild-storage::messaging` wires SQLx repositories for guilds/channels/events.
  * Integration test (`websocket_broadcasts_events`) exercises fan-out via `tokio_tungstenite` to guard regressions.
- Tests: `cargo test -p openguild-core`, `cargo test -p openguild-storage`, `cargo test -p openguild-server` (metrics gating optional). WebSocket integration test requires Tokio runtime (runs by default).
- Migrations: `backend/migrations/0001_initial.sql`, `0002_create_sessions.sql`, `0003_messaging.sql` (guilds/channels/channel_events schema).
- Docs touched: docs/SETUP.md (session key + DB persistence notes), docs/TIMELINE.md (Weeks 1-4 updated), docs/API.md (sessions + guild/channel/message routes + WebSocket), docs/PROTOCOL.md (event envelope + guardrails), docs/CI_PLAN.md (matrix outline).
- Tooling: top-level Makefile exposes `fmt`, `lint`, `check`, `test`, `test-metrics` targets.
- Outstanding follow-ups:
  * Extend metrics instrumentation to cover messaging/WebSocket paths (histograms + queue depth gauges) once the observability sprint starts.
  * Replace the in-memory authenticator with SQLx-backed credential storage when the user schema lands; revisit session issuance to include refresh tokens + revocation plumbing.
  * Finalise payload validation/size limits and authz checks on messaging endpoints (currently accept any sender string); align with upcoming auth/session work.
- CI: see docs/CI_PLAN.md for matrix + scheduled jobs.


Notes for next agent (2025-10-13):
- Messaging CRUD/WebSocket stack is live; coordinate with frontend to consume the new REST + WS APIs documented in docs/API.md and capture any schema tweaks they need (e.g., sender identity shape, pagination).
- Metrics backlog: extend Prometheus coverage to WebSocket/message pipelines and channel broadcast saturation once we enter Week 5 observability work.
- Begin drafting the credential storage schema (users + memberships) so Week 5 auth hardening can start quickly; confirm with product how guild/channel membership should be authorised.
- Consider preparing migration scaffolding/tests for the upcoming user tables and message retention knobs.
- Readiness path now retains a pooled handle (via `StoragePool`) while still using eager connect at startup.
- CI plan documented in docs/CI_PLAN.md; no workflow file yet.
- Makefile targets available (`make fmt`, `make lint`, `make check`, `make test`, `make test-metrics`).
- Keep BRAIN.txt updated when context changes; no official mechanism beyond this doc yet.

